// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entity/item.dart';
import 'entity/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 211175596488171954),
      name: 'Item',
      lastPropertyId: const IdUid(10, 8112499218659894651),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2628773586429032965),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1670468273561923466),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1815802754802030394),
            name: 'isFood',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 425126513918833803),
            name: 'isPickedUp',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4465981545594081920),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1669256967912975407),
            name: 'pickUpTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4407819448668673919),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3635812009697342848),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 977901200494348452),
            name: 'ownerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1297113590780546573),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(10, 8112499218659894651),
            name: 'recipientId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 4954604622937136434),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1257566022032519132),
      name: 'User',
      lastPropertyId: const IdUid(2, 4876962048896954058),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8216542579498225180),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4876962048896954058),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'givenItems', srcEntity: 'Item', srcField: 'owner'),
        ModelBacklink(
            name: 'receivedItems', srcEntity: 'Item', srcField: 'recipient')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1257566022032519132),
      lastIndexId: const IdUid(2, 4954604622937136434),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Item: EntityDefinition<Item>(
        model: _entities[0],
        toOneRelations: (Item object) => [object.owner, object.recipient],
        toManyRelations: (Item object) => {},
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final pickUpTimeOffset = fbb.writeString(object.pickUpTime);
          final locationOffset = fbb.writeString(object.location);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.isFood);
          fbb.addBool(3, object.isPickedUp);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, pickUpTimeOffset);
          fbb.addOffset(6, locationOffset);
          fbb.addOffset(7, imageUrlOffset);
          fbb.addInt64(8, object.owner.targetId);
          fbb.addInt64(9, object.recipient.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Item(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isFood:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              isPickedUp: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              pickUpTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              imageUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''));
          object.owner.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.owner.attach(store);
          object.recipient.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.recipient.attach(store);
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              RelInfo<Item>.toOneBacklink(
                      9, object.id, (Item srcObject) => srcObject.owner):
                  object.givenItems,
              RelInfo<Item>.toOneBacklink(
                      10, object.id, (Item srcObject) => srcObject.recipient):
                  object.receivedItems
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo<User>(
              object.givenItems,
              store,
              RelInfo<Item>.toOneBacklink(
                  9, object.id, (Item srcObject) => srcObject.owner));
          InternalToManyAccess.setRelInfo<User>(
              object.receivedItems,
              store,
              RelInfo<Item>.toOneBacklink(
                  10, object.id, (Item srcObject) => srcObject.recipient));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// see [Item.id]
  static final id = QueryIntegerProperty<Item>(_entities[0].properties[0]);

  /// see [Item.name]
  static final name = QueryStringProperty<Item>(_entities[0].properties[1]);

  /// see [Item.isFood]
  static final isFood = QueryBooleanProperty<Item>(_entities[0].properties[2]);

  /// see [Item.isPickedUp]
  static final isPickedUp =
      QueryBooleanProperty<Item>(_entities[0].properties[3]);

  /// see [Item.description]
  static final description =
      QueryStringProperty<Item>(_entities[0].properties[4]);

  /// see [Item.pickUpTime]
  static final pickUpTime =
      QueryStringProperty<Item>(_entities[0].properties[5]);

  /// see [Item.location]
  static final location = QueryStringProperty<Item>(_entities[0].properties[6]);

  /// see [Item.imageUrl]
  static final imageUrl = QueryStringProperty<Item>(_entities[0].properties[7]);

  /// see [Item.owner]
  static final owner =
      QueryRelationToOne<Item, User>(_entities[0].properties[8]);

  /// see [Item.recipient]
  static final recipient =
      QueryRelationToOne<Item, User>(_entities[0].properties[9]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[1].properties[1]);
}
